openapi: 3.0.1

info:
  title: Kubtest API
  description: 'Kubtest provides a Kubernetes-native framework for test definition, execution and results'
  contact:
    email: kubtest@kubshop.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

externalDocs:
  description: 'Find out more about kubtest'
  url: http://kubtest.io

tags:
  - name: api
    description: 'Kubtest API operations'
  - name: executor
    description: 'Executor operations'
  - name: scripts
    description: 'Script operations'
  - name: executions
    description: 'Execution operations'

paths:
  /executions:
    get:
      tags:
        - executions
        - api
      summary: 'Get all script executions'
      description: 'Returns array of scripts executions'
      operationId: listExecutions
      parameters:
        - $ref: '#/components/parameters/ExecutionsPageSize'
        - $ref: '#/components/parameters/ExecutionsPageIndex'
        - $ref: '#/components/parameters/ExecutionsStatusFilter'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExecutionsResult'
        500:
          description: 'problem with getting script executions from storage'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  /executions/{executionID}:
    get:
      parameters:
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the script execution
        - $ref: '#/components/parameters/ExecutionsPageSize'
        - $ref: '#/components/parameters/ExecutionsPageIndex'
        - $ref: '#/components/parameters/ExecutionsStatusFilter'
      tags:
        - executions
        - api
      summary: 'Get script execution'
      description: 'Returns execution with given executionID'
      operationId: getScriptExecutionByID
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
        500:
          description: 'problem with getting script executions from storage'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  /scripts:
    get:
      tags:
        - scripts
        - api
      summary: 'List scripts'
      description: 'filters will be added later'
      operationId: listScripts
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Script'
        502:
          description: 'problem with read information from kubernetes cluster'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
    post:
      tags:
        - scripts
        - api
      summary: 'create new script'
      description: 'filters will be added later'
      operationId: createScript
      requestBody:
        description: script details body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptCreateRequest'
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Script'
        400:
          description: 'problem with script definition - probably some bad input occurs (invalid JSON body or similar)'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
        502:
          description: 'problem with communicating with kubernetes cluster'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  /scripts/{id}:
    get:
      tags:
        - scripts
        - api
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script
      summary: 'Get script'
      description: 'Gets the specified script'
      operationId: getScript
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
        502:
          description: 'problem with read information from kubernetes cluster'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  /scripts/{id}/executions:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script
        - in: query
          name: namespace
          schema:
            type: integer
          description: kubernetes namespace
          required: false
      tags:
        - api
        - scripts
        - executions
      summary: 'Starts new script execution'
      description: 'New script execution returns new execution details on successful execution start'
      operationId: executeScript
      requestBody:
        description: body passed to configure execution
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptExecutionRequest'
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Execution'
        400:
          description: 'problem with request body'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
        502:
          description: 'problem with communicating with kubernetes cluster'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
        500:
          description: 'problem with script execution'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script
      tags:
        - api
        - scripts
        - executions
      summary: 'Get all script executions'
      description: 'Returns array of all available script executions'
      operationId: listScriptExecutions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExecutionSummary'
        500:
          description: 'problem with getting script executions from storage'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  /scripts/{id}/executions/{executionID}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the script execution
      tags:
        - api
        - scripts
        - executions
      summary: 'Get script execution'
      description: 'Returns execution with given executionID'
      operationId: getScriptExecution
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
        500:
          description: 'problem with getting script executions from storage'
          content:
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'

  /scripts/{id}/executions/{executionID}/abort:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the script
        - in: path
          name: executionID
          schema:
            type: string
          required: true
          description: ID of the script execution
      tags:
        - api
        - scripts
        - executions
      summary: 'Aborts execution'
      description: 'Aborts execution and returns execution details'
      operationId: abortScriptExecution
      responses:
        501:
          description: not implemented yet
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Execution'

components:
  schemas:

    Script:
      type: object
      properties:
        name:
          type: string
          description: script name
        type:
          type: string
          description: script type
          enum:
            - postman/collection
        content:
          type: string
          description: script content
        created:
          type: string
          format: date-time

    ScriptExecution:
      type: object
      description: API server script execution
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        script-name:
          type: string
          description: unique script name (CRD Script name)
        script-type:
          type: string
          description: script type e.g. postman/collection
        name:
          type: string
          description: 'execution name'
        envs:
          type: object
          description: 'execution envs passed to executor'
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"
        params:
          type: object
          description: 'execution params passed to executor'
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"
        execution:
          $ref: '#/components/schemas/Execution'

    ExecutionsResult:
      description: the result for a page of executions
      type: object
      required:
        - totals
        - results
      properties:
        totals:
          $ref: '#/components/schemas/ExecutionTotals'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionSummary'

    ExecutionTotals:
      type: object
      description: various execution counters
      required:
        - results
        - passed
        - failed
        - queued
        - pending
      properties:
        results:
          type: integer
          description: the total number of executions available
        passed:
          type: integer
          description: the total number of passed executions available
        failed:
          type: integer
          description: the total number of failed executions available
        queued:
          type: integer
          description: the total number of queued executions available
        pending:
          type: integer
          description: the total number of running executions available

    ExecutionSummary:
      description: execution summary
      type: object
      required:
        - id
        - script-name
        - script-type
        - status
        - start-time
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        scriptName:
          type: string
          description: name of the script
        scriptType:
          type: string
          description: the type of script for this execution
        status:
          $ref: '#/components/schemas/ExecutionStatus'
        startTime:
          type: string
          description: 'test execution start time'
          format: date-time
        endTime:
          type: string
          description: 'test execution end time'
          format: date-time

    ExecutionStatus:
      type: string
      enum:
        - queued
        - pending
        - success
        - failed

    Execution:
      description: execution result returned from executor
      type: object
      properties:
        id:
          type: string
          description: execution id
          format: bson objectId
        scriptContent:
          type: string
          description: script metadata content
        repository:
          $ref: '#/components/schemas/Repository'
        params:
          type: object
          description: 'execution params passed to executor'
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"
        status:
          $ref: '#/components/schemas/ExecutionStatus'
        result:
          $ref: '#/components/schemas/ExecutionResult'
        startTime:
          type: string
          description: 'test start time'
          format: date-time
        endTime:
          type: string
          description: 'test end time'
          format: date-time

    ExecutionResult:
      description: execution result data
      type: object
      properties:
        status:
          type: string
          description: script execution status
          enum: [ success, failed ]
        output:
          type: string
          description: 'RAW Script execution output, depends of reporter used in particular tool'
        outputType:
          type: string
          description: 'output type depends of reporter used in partucular tool'
          enum:
            - text/plain
            - application/junit+xml
            - application/json
        errorMessage:
          type: string
          description: 'error message when status is failed, separate to output as output can be partial in case of error'
        startTime:
          type: string
          description: script execution start time
          format: date-time
        endTime:
          type: string
          description: script execution start time
          format: date-time
        steps:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionStepResult'
          description: execution steps (for collection of requests)

    ExecutionStepResult:
      description: execution result data
      type: object
      properties:
        name:
          type: string
          description: step name
        duration:
          type: string
          format: duration
        status:
          type: string
          description: execution step status
          enum: [ success, failed ]
        assertionResults:
          type: array
          items:
            $ref: '#/components/schemas/AssertionResult'

    AssertionResult:
      description: execution result data
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [ success, failed ]
        errorMessage:
          type: string
          nullable: true



    #
    # Requests
    #

    ExecutionRequest:
      description: scripts execution request body
      type: object
      properties:
        type:
          type: string
          description: script type
          example: postaman/collection
        name:
          type: string
          description: script execution custom name
          example: testing with 1000 users
        params:
          type: object
          description: 'execution params passed to executor'
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"
        content:
          type: string
          description: script content as string (content depends from executor)
        inputType:
          type: string
          description: >
            script content type can be: 
            - direct content - created from file,
            - git repo directory checkout in case when test is some kind of project or have more than one file,
          enum:
            - content
            - git
        repository:
          $ref: '#/components/schemas/Repository'

    Repository:
      description: scripts execution request body
      type: object
      required:
        - type
        - uri
        - branch
      properties:
        type:
          type: string
          enum:
            - git
          description: VCS repository type
        uri:
          type: string
          description: uri of content file or git directory
        branch:
          type: string
          description: branch/tag name for checkout
        path:
          type: string
          description: if needed we can checkout particular path (dir or file) in case of BIG/mono repositories

    ScriptExecutionRequest:
      description: scripts execution request body
      type: object
      properties:
        name:
          type: string
          description: script execution custom name
          example: testing with 1000 users
        namespace:
          type: string
          description: script kubernetes namespace ("default" when not set)
          example: default
        params:
          type: object
          description: 'execution params passed to executor'
          additionalProperties:
            type: string
          example:
            users: "3"
            prefix: "some-"

    ScriptCreateRequest:
      description: scripts create request body
      type: object
      properties:
        name:
          type: string
          description: script name - Custom Resource name - must be unique
          example: kubeshop-homepage-test
        type:
          type: string
          description: script type - what executor type should be used during test execution
          example: postman/collection
        namespace:
          type: string
          description: kubernetes namespace (defaults to 'default')
          example: default
        inputType:
          type: string
          description: >
            script content type can be: 
            - direct content - created from file, 
            - git repo directory checkout in case when test is some kind of project or have more than one file, 
          enum:
            - content
            - git
        repository:
          $ref: '#/components/schemas/Repository'
        content:
          type: string
          description: script content - executor specific e.g. fo postman-collections executor
          example: >
            {
              "info": {
                "_postman_id": "57ad6291-5b8f-4b2d-b24d-d2d2ce8785bb",
                "name": "SimpleKubeshop",
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
              },
              "item": [
                {
                  "name": "Homepage",
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": null
                  },
                  "response": []
                }



    #
    # Errors
    #

    Problem:
      description: problem response in case of error
      type: object
      properties:
        type:
          type: string
          description: Type contains a URI that identifies the problem type. This URI will,
          example: http://kubeshop.io/kubtest/problems/invalid-script-name
        title:
          type: string
          description: Title is a short, human-readable summary of the problem type. This title SHOULD NOT change from occurrence to occurrence of the problem, except forpurposes of localization.
          example: Invalid script name
        status:
          type: integer
          description: HTTP status code for this occurrence of the problem.
          example: 500
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Your script name can't contain forbidden characters like "}}}" passed
        instance:
          type: string
          description: A URI that identifies the specific occurrence of the problem. This URI may or may not yield further information if de-referenced.
          example: http://10.23.23.123:8088/scripts
  parameters:
    ExecutionsPageSize:
      in: query
      name: pageSize
      schema:
        type: integer
        default: 100
      description: the number of executions to get, setting to 0 will return only totals
      required: false
    ExecutionsPageIndex:
      in: query
      name: page
      schema:
        type: integer
        default: 0
      description: the page index to start at
      required: false
    ExecutionsStatusFilter:
      in: query
      name: status
      schema:
        $ref: '#/components/schemas/ExecutionStatus'
      description: optional status filter
      required: false
